"use client"

import { DashboardLayout } from "@/components/dashboard-layout"
import { CVECard } from "@/components/cve-card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { mockCVEs } from "@/lib/mock-data"
import { Search, Filter } from "lucide-react"
import { useState } from "react"
import type { SeverityLevel, CVEStatus } from "@/lib/types"

export default function CVETrackingPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [severityFilter, setSeverityFilter] = useState<SeverityLevel | "all">("all")
  const [statusFilter, setStatusFilter] = useState<CVEStatus | "all">("all")

  const filteredCVEs = mockCVEs.filter((cve) => {
    const matchesSearch =
      searchQuery === "" ||
      cve.cveId.toLowerCase().includes(searchQuery.toLowerCase()) ||
      cve.description.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesSeverity = severityFilter === "all" || cve.severity === severityFilter
    const matchesStatus = statusFilter === "all" || cve.status === statusFilter
    return matchesSearch && matchesSeverity && matchesStatus
  })

  const stats = {
    total: mockCVEs.length,
    critical: mockCVEs.filter((c) => c.severity === "critical").length,
    high: mockCVEs.filter((c) => c.severity === "high").length,
    affected: mockCVEs.filter((c) => c.status === "affected").length,
  }

  return (
    <DashboardLayout breadcrumbs={[{ label: "CVE Tracking" }]}>
      <div className="space-y-6 animate-in fade-in duration-500">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold tracking-tight">CVE Tracking</h1>
          <p className="text-muted-foreground">Monitor and manage Common Vulnerabilities and Exposures</p>
        </div>

        {/* Stats */}
        <div className="grid gap-4 md:grid-cols-4">
          <div className="rounded-lg border border-border bg-card p-4">
            <p className="text-sm text-muted-foreground">Total CVEs</p>
            <p className="text-2xl font-bold">{stats.total}</p>
          </div>
          <div className="rounded-lg border border-border bg-card p-4">
            <p className="text-sm text-muted-foreground">Critical</p>
            <p className="text-2xl font-bold text-chart-1">{stats.critical}</p>
          </div>
          <div className="rounded-lg border border-border bg-card p-4">
            <p className="text-sm text-muted-foreground">High Severity</p>
            <p className="text-2xl font-bold text-chart-2">{stats.high}</p>
          </div>
          <div className="rounded-lg border border-border bg-card p-4">
            <p className="text-sm text-muted-foreground">Affecting Projects</p>
            <p className="text-2xl font-bold text-destructive">{stats.affected}</p>
          </div>
        </div>

        {/* Filters */}
        <div className="flex flex-col gap-4 sm:flex-row sm:items-center">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search CVE ID or description..."
              className="pl-9"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <div className="flex gap-2">
            <Select value={severityFilter} onValueChange={(value) => setSeverityFilter(value as SeverityLevel | "all")}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severity</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>
            <Select value={statusFilter} onValueChange={(value) => setStatusFilter(value as CVEStatus | "all")}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="monitoring">Monitoring</SelectItem>
                <SelectItem value="affected">Affected</SelectItem>
                <SelectItem value="patched">Patched</SelectItem>
                <SelectItem value="not-applicable">Not Applicable</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Active Filters */}
        {(severityFilter !== "all" || statusFilter !== "all" || searchQuery !== "") && (
          <div className="flex items-center gap-2 flex-wrap">
            <span className="text-sm text-muted-foreground">Active filters:</span>
            {severityFilter !== "all" && (
              <Badge variant="secondary" className="gap-2">
                Severity: {severityFilter}
                <button onClick={() => setSeverityFilter("all")} className="hover:text-destructive">
                  ×
                </button>
              </Badge>
            )}
            {statusFilter !== "all" && (
              <Badge variant="secondary" className="gap-2">
                Status: {statusFilter}
                <button onClick={() => setStatusFilter("all")} className="hover:text-destructive">
                  ×
                </button>
              </Badge>
            )}
            {searchQuery !== "" && (
              <Badge variant="secondary" className="gap-2">
                Search: {searchQuery}
                <button onClick={() => setSearchQuery("")} className="hover:text-destructive">
                  ×
                </button>
              </Badge>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                setSeverityFilter("all")
                setStatusFilter("all")
                setSearchQuery("")
              }}
            >
              Clear all
            </Button>
          </div>
        )}

        {/* CVE Grid */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {filteredCVEs.map((cve) => (
            <CVECard key={cve.id} cve={cve} />
          ))}
        </div>

        {filteredCVEs.length === 0 && (
          <div className="flex flex-col items-center justify-center rounded-lg border border-dashed border-border p-12 text-center">
            <Filter className="h-12 w-12 text-muted-foreground mb-4" />
            <p className="text-lg font-medium">No CVEs found</p>
            <p className="text-sm text-muted-foreground">Try adjusting your filters or search query</p>
          </div>
        )}
      </div>
    </DashboardLayout>
  )
}
